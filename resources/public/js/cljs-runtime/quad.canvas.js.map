{"version":3,"sources":["quad/canvas.cljs"],"mappings":"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","names":["js/quad","js/quad.canvas","js/quad.canvas.ctx-atom","quad.canvas/ctx-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/quad.canvas.canvas-data-atom","quad.canvas/canvas-data-atom","quad.canvas/ctx-invoke","ctx","fn","args","res","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/js-invoke","quad.canvas/width","cljs.core/deref","quad.canvas/height","quad.canvas/get-canvas-id","quad.canvas/canvas","quad.canvas/mouse-xy","js-event","target","rect","x","y","quad.canvas/resize-canvas","canvas","css-to-real-pixels","or__4185__auto__","js/window","d-width","G__36018","Math/floor","d-height","G__36019","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quad.canvas/create-dom-canvas!","width","height","id","canvas?","cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic","js/document","js/document.createElement","quad.canvas/random-id","js/Math","quad.canvas/create-canvas","h","w","js/document.body","cljs.core/reset!","cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/begin-path","quad.canvas/close-path","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","quad.canvas/stroke","seq36020","self__4777__auto__","cljs.core/seq","_","quad.canvas/fill-style","color","quad.canvas/stroke-style","quad.canvas/js-fill","quad.canvas/js-rect","seq36021","G__36022","cljs.core/first","cljs.core/next","self__4776__auto__","quad.canvas/js-move-to","seq36023","G__36024","quad.canvas/js-line-to","seq36025","G__36026","quad.canvas/js-translate","seq36027","G__36028","quad.canvas/js-arc","seq36029","G__36030","quad.canvas/js-fill-rect","seq36031","G__36032","quad.canvas/js-stroke","seq36033","G__36034","quad.canvas/translate","quad.canvas.js_translate.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/draw-pixel","r","g","b","a","i","canvas-data","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/white-img","seq__36035","chunk__36036","count__36037","i__36038","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core.range.cljs$core$IFn$_invoke$arity$1","quad.canvas/put-img-data","js/console.log","quad.canvas/fill","quad.canvas/rect","seq36039","G__36040","G__36041","G__36042","G__36043","opt","G__36044","quad.canvas.js_rect.cljs$core$IFn$_invoke$arity$variadic","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","quad.canvas/line","x1","y1","x2","y2","G__36045","quad.canvas.js_move_to.cljs$core$IFn$_invoke$arity$variadic","quad.canvas.js_line_to.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/arc","start-angle","stop-angle","G__36046","quad.canvas.js_arc.cljs$core$IFn$_invoke$arity$variadic","quad.canvas.stroke.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/circle","Math/PI","quad.canvas/fill-rect","quad.canvas.js_fill_rect.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/background"],"sourcesContent":["(ns quad.canvas)\n\n(defonce ctx-atom (atom nil))\n(defonce canvas-data-atom (atom nil))\n\n(defn- ctx-invoke\n  [ctx fn args]\n  (let [res (apply js-invoke ctx fn args)]\n    (if res\n      res\n      ctx)))\n\n(defn- width [] (aget @ctx-atom \"canvas\" \"width\"))\n(defn- height [] (aget @ctx-atom \"canvas\" \"height\"))\n\n(defn get-canvas-id [] (aget @ctx-atom \"canvas\" \"id\"))\n(defn canvas [] (aget @ctx-atom \"canvas\"))\n\n(defn mouse-xy\n  [js-event]\n  (let [\n        target (aget js-event \"target\")\n        rect (.getBoundingClientRect target)\n        x (- (.-clientX js-event) (.-left rect))\n        y (- (.-clientY js-event) (.-top rect))]\n    {:x x :y y}))\n\n\n(defn resize-canvas\n  []\n  (let [canvas (.-canvas @ctx-atom)\n        css-to-real-pixels (or (.-devicePixelRatio js/window) 1)\n        d-width (Math/floor (* (.-clientWidth canvas) css-to-real-pixels))\n        d-height (Math/floor (* (.-clientHeight canvas) css-to-real-pixels))]\n    (when-not (or (= (.-width canvas) d-width)\n                  (= (.-height canvas) d-height))\n      (aset canvas \"style\" \"height\" (str (height) \"px\"))\n      (aset canvas \"style\" \"width\" (str (width) \"px\"))\n\n      (set! (.-height canvas) d-height)\n      (set! (.-width canvas) d-width)\n\n      (.scale @ctx-atom css-to-real-pixels css-to-real-pixels)\n      )))\n\n(defn- create-dom-canvas!\n  [width height id target]\n  (let [canvas? (js-invoke js/document \"getElementById\" id)]\n    (when-not canvas?\n      (let [canvas (js/document.createElement \"canvas\")]\n        (do\n          (.setAttribute canvas \"id\" id)\n          (.setAttribute canvas \"height\" (str height \"px\"))\n          (.setAttribute canvas \"width\" (str width \"px\"))\n          (.appendChild target canvas))\n        canvas))))\n\n(defn- random-id\n  []\n  (str \"_\" (.substr (.toString (.random js/Math) 36) 2 9)))\n\n(defn create-canvas\n  [h w]\n  (let [canvas (create-dom-canvas! w h (random-id) js/document.body)]\n    (reset! ctx-atom (.getContext canvas \"2d\" (clj->js \"alpha\" false)))\n    ;; TODO is this the only way to not blurr lines...?!?!?\n    (.setTransform @ctx-atom 1, 0, 0, 1, 0.5, 0.5)\n\n    ;; TODO might not be the best thing to create this here?\n    ;(reset! canvas-data-atom (.getImageData @ctx-atom 0 0 w h))\n    ))\n\n(defn- begin-path\n  [ctx]\n  (.beginPath ctx)\n  ctx)\n\n(defn- close-path\n  [ctx]\n  (.closePath ctx)\n  ctx)\n\n(defn stroke\n  [& _]\n  (.stroke @ctx-atom))\n\n;; color\n(defn fill-style\n  [color]\n  (aset @ctx-atom \"fillStyle\" color))\n\n(defn stroke-style\n  [color]\n  (aset @ctx-atom \"strokeStyle\" color))\n\n\n(defn- js-fill [ctx] (.fill ctx))\n(defn- js-rect [ctx & args] (ctx-invoke ctx \"rect\" args))\n(defn- js-move-to [ctx & args] (ctx-invoke ctx \"moveTo\" args))\n(defn- js-line-to [ctx & args] (ctx-invoke ctx \"lineTo\" args))\n(defn- js-translate [ctx & args] (ctx-invoke ctx \"translate\" args))\n(defn- js-arc [ctx & args] (ctx-invoke ctx \"arc\" args))\n(defn- js-fill-rect [ctx & args] (ctx-invoke ctx \"fillRect\" args))\n(defn- js-stroke [ctx & args] (ctx-invoke ctx \"stroke\" args))\n\n(defn translate\n  [x y]\n  (js-translate @ctx-atom x y))\n\n(defn draw-pixel\n  [x y r g b a]\n  (let [i (* (+ x (* y (width))) 4)\n        canvas-data @canvas-data-atom]\n    (println (width) x y \" is = \" i)\n    (aset canvas-data \"data\" (+ i 0) r)\n    (aset canvas-data \"data\" (+ i 1) g)\n    (aset canvas-data \"data\" (+ i 2) b)\n    (aset canvas-data \"data\" (+ i 3) a)\n    ))\n\n(defn white-img\n  []\n  (let [canvas-data @canvas-data-atom]\n    (doseq [i (range (.-length (.-data canvas-data)))]\n      (aset canvas-data \"data\" i 255)\n      )\n    )\n  )\n\n(defn put-img-data\n  []\n  (js/console.log @canvas-data-atom)\n  (.putImageData @ctx-atom @canvas-data-atom 0 0))\n\n(defn fill\n  []\n  (js-fill @ctx-atom))\n\n;; shapes\n(defn rect\n  [x y w h & opt]\n  (doto @ctx-atom\n    begin-path\n    (js-rect x y w h))\n  (when (get-in opt [0 :fill?])\n    (js-fill @ctx-atom))\n\n  ;; default stroke if not batching\n  (when-not (get-in opt [0 :batch?])\n    (js-stroke @ctx-atom))\n  )\n\n(defn line\n  [x1 y1 x2 y2]\n  (doto @ctx-atom\n    begin-path\n    ;(js-translate 0.5 0.5)\n    (js-move-to x1 y1)\n    (js-line-to x2 y2)\n    js-stroke))\n\n(defn arc\n  [x y r start-angle stop-angle]\n  (doto @ctx-atom\n    begin-path\n    ;(js-translate 0.5 0.5)\n    (js-arc x y r start-angle stop-angle)\n    stroke))\n\n(defn circle\n  [x y r]\n  (arc x y r 0 (* 2 Math/PI)))\n\n\n(defn fill-rect\n  [x y h w color]\n  (fill-style color)\n  (js-fill-rect @ctx-atom x y w h))\n\n\n(defn background\n  [color]\n  (fill-rect 0 0 (width) (height) color))\n\n(comment\n\n  )\n"]}