{"version":3,"sources":["quad/main.cljs"],"mappings":"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","names":["taoensso.tufte/add-basic-println-handler!","cljs.core/enable-console-print!","js/quad","js/quad.main","js/quad.main.state-atom","quad.main/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","quad.main/initial-tree","quad.tree/make-tree","quad.main/raf-render","state","js/requestAnimationFrame","timestamp","quad.main/render","quad.main/raf-render-rect","quad.main/render-rect","quad.main/handle-event!","name","data","map__66525","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","width","height","pred__66527","expr__66528","G__66530","G__66531","G__66532","G__66533","G__66534","G__66535","G__66536","G__66537","G__66542","G__66543","G__66554","G__66555","G__66557","G__66558","js/Error","cljs.core/=","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","cells","quad.tree/random-cells","js/console","quad.tree/insert-cells","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cell","quad.canvas/mouse-xy","G__66538","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__66539","map__66540","tree","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","quad.tree/insert","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","map__66544","x","y","random-cells","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__66547","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__66549","cljs.core/chunk-buffer","i__66548","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66546","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","_","cljs.core.range.cljs$core$IFn$_invoke$arity$1","quad.util/random","G__66550","p__66551","map__66552","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","new-tree","G__66556","in-rect","G__66559","p__66560","map__66561","cells-in-rect","seq__66563","chunk__66564","count__66565","i__66566","map__66571","c__4609__auto__","cljs.core/chunk-first","map__66573","cljs.core/next","quad.canvas/fill-rect","seq__66575","chunk__66576","count__66577","i__66578","map__66583","map__66585","quad.canvas/stroke-style","seq__66587","chunk__66588","count__66589","i__66590","map__66595","map__66597","quad.tree.tree__GT_bounds.cljs$core$IFn$_invoke$arity$1","quad.canvas.rect.cljs$core$IFn$_invoke$arity$variadic","quad.canvas/stroke","quad.main/dispatch-worker","trigger-event","worker","js/Worker","e","map__66599","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","G__66601","G__66602","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/clj->js","p__66603","map__66604","quad.main/on-rect-move","bounds","quad.main/on-rect-resize","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","p__66606","map__66607","target-bounds","cells-in-bounds","quad.tree.query.cljs$core$IFn$_invoke$arity$2","seq__66609","chunk__66610","count__66611","i__66612","map__66617","map__66619","seq__66621","chunk__66622","count__66623","i__66624","map__66629","map__66631","quad.main/mouse-down?","js-evt","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quad.main/mouse-handler-maker","rect-mouse-handler","id","type","pred__66633","expr__66634","G__66636","G__66637","G__66638","G__66639","G__66640","G__66641","G__66642","G__66643","G__66644","G__66645","G__66646","G__66647","G__66648","G__66649","G__66650","G__66651","G__66652","G__66653","G__66654","G__66655","cljs.core/not","quad.components/is-resizing-rect?","quad.components/is-moving-rect?","quad.main/init!","map__66656","rect-thing","quad.components/rect-maker","mouse-handler","quad.canvas/create-canvas","quad.canvas/resize-canvas","quad.components/add-mouse-window-handlers!","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","quad.components/controls","js/document","quad.main/reload!","quad.main/profile-insert-cells","n","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","vec__66658","taoensso.tufte.may_profile_QMARK_.cljs$core$IFn$_invoke$arity$2","pd__29024__auto__","taoensso.tufte.impl/new-pdata-local","taoensso.tufte.impl/pdata-proxy-push","taoensso.tufte.impl/pdata-proxy-pop","result__29030__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","pstats__29031__auto__","taoensso.tufte.impl/handle!","taoensso.tufte/HandlerVal","cljs.core/Delay","taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$1","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","n__4666__auto__","__pd-dynamic","taoensso.tufte.impl/*pdata*","temp__5733__auto__","or__4185__auto__","taoensso.tufte.impl/pdata-proxy-get","__pd","__t0","taoensso.encore/now-nano","__result","__t1","taoensso.tufte.impl/capture-time!","quad.tree/make-cells"],"sourcesContent":["(ns quad.main\n  (:require [quad.tree :as qt]\n            [quad.input :as i]\n            [quad.components :as comp]\n            [quad.canvas :as c]\n            [quad.util :as u]\n            [reagent.core :as r]\n            [reagent.dom :as rd]\n\n            [shodan.console :as console :include-macros true]\n    ;[shodan.inspection :refer [inspect]]\n\n            [taoensso.tufte :as tufte :refer (defnp p profiled profile)]\n            ))\n\n\n(tufte/add-basic-println-handler! {})\n(declare render render-rect)\n\n(enable-console-print!)\n\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom {:cells             []\n                      :width             1024\n                      :height            1024\n                      :is-drawing-points false\n                      ;; TODO\n                      :target-bounds     {:x      300\n                                          :y      200\n                                          :width  200\n                                          :height 200}\n                      :tree              nil}))\n\n(def initial-tree (qt/make-tree {:capacity 4\n                                 :name     \"start\"\n                                 :bounds   {:x      (/ (:width @state-atom) 2)\n                                            :y      (/ (:height @state-atom) 2)\n                                            :width  (/ (:width @state-atom) 2)\n                                            :height (/ (:height @state-atom) 2)}}))\n\n(defn raf-render\n  [state]\n  (js/requestAnimationFrame (fn [timestamp] (render state))))\n\n(defn raf-render-rect\n  [state]\n  (js/requestAnimationFrame (fn [timestamp] (render-rect state))))\n\n(defn handle-event!\n  [name data]\n  (let [{:keys [width height]} @state-atom]\n    (condp = name\n      :print-tree (cljs.pprint/pprint (:tree @state-atom))\n      :random-cells (let [cells (-> (qt/random-cells data width height)\n                                    ;qt/sort-cells-by-z-order\n                                    )]\n\n                      (console/time-start \"insert-random-cells\")\n                      (->> cells\n                           ;qt/sort-cells-by-z-order\n                           (qt/insert-cells initial-tree)\n                           (swap! state-atom assoc :tree)\n                           (swap! state-atom assoc :cells cells)\n                           )\n                      (console/time-end \"insert-random-cells\")\n                      (raf-render @state-atom))\n      :rect-drag (-> (swap! state-atom assoc :resizable-rect-pos data)\n                     raf-render-rect)\n      :mouse-click (let [cell (c/mouse-xy data)]\n                     (-> (swap! state-atom (fn [{:keys [cells tree] :as state}]\n                                             (-> (assoc state :tree (qt/insert tree cell))\n                                                 (assoc :cells (conj cells cell)))))\n                         render))\n      :mouse-down (let [{:keys [x y] :as cell} (c/mouse-xy data)\n                        random-cells (into #{} (conj (for [_ (range 5)]\n                                                       {:x (u/random (- x 20) (+ x 20))\n                                                        :y (u/random (- y 20) (+ y 20))})\n                                                     cell))]\n                    (-> (swap! state-atom (fn [{:keys [cells tree] :as state}]\n                                            (-> (assoc state :tree (qt/insert-cells tree random-cells))\n                                                (assoc :cells (concat cells random-cells))\n                                                (assoc :is-drawing-points true))))\n                        render))\n      :new-tree (let [new-tree (:tree data)\n                      cells (:cells data)]\n                  (-> (swap! state-atom assoc\n                             :tree new-tree\n                             :cells (concat (:cells @state-atom) cells))\n                      render))\n      :cells-in-rect (let [in-rect (:cells-in-rect data)]\n                       (-> (swap! state-atom assoc :cells-in-rect in-rect)\n                           render)))))\n\n(defn render\n  [{:keys [cells tree cells-in-rect] :as state}]\n  (doseq [{:keys [x y]} cells]\n    (c/fill-rect x y 3 3 \"pink\"))\n\n  (doseq [{:keys [x y]} cells-in-rect]\n    (c/fill-rect x y 3 3 \"red\"))\n\n  (c/stroke-style \"yellow\")\n  (doseq [{:keys [x y width height]} (qt/tree->bounds tree)]\n    (c/rect (- x width) (- y height) (* 2 width) (* 2 height) {:batch? true}))\n  (c/stroke))\n\n(defn dispatch-worker\n  [data trigger-event]\n  (let [worker (js/Worker. \"/js/worker.js\")]\n    (.. worker (addEventListener \"message\" (fn [e]\n                                             (let [{:keys [name data]} (js->clj (aget e \"data\") :keywordize-keys true)]\n                                               (trigger-event (keyword name) data)\n                                               ))))\n    (.. worker (postMessage (clj->js data)))))\n\n(defn on-rect-move\n  [{:keys [x y width height] :as bounds}]\n  (-> (swap! state-atom assoc :target-bounds {:x      (+ x (/ width 2))\n                                              :y      (+ y (/ height 2))\n                                              :width  (/ width 2)\n                                              :height (/ height 2)})\n      raf-render-rect\n      )\n  ;(dispatch-worker {:name :query-rect\n  ;                  :data {:tree    (:tree @state-atom)\n  ;                         :bounds  {:x      (+ x (/ width 2))\n  ;                                   :y      (+ y (/ height 2))\n  ;                                   :width  (/ width 2)\n  ;                                   :height (/ height 2)}\n  ;                         :cb-name :cells-in-rect}} handle-event!)\n  )\n\n(defn on-rect-resize\n  [bounds]\n  (swap! state-atom assoc :target-bounds (dissoc bounds :event)))\n\n(defn render-rect\n  [{:keys [tree cells target-bounds]}]\n  (let [cells-in-bounds (qt/query tree target-bounds)]\n    (doseq [{:keys [x y]} cells]\n      (c/fill-rect x y 3 3 \"pink\"))\n\n    (doseq [{:keys [x y]} cells-in-bounds]\n      (c/fill-rect x y 3 3 \"red\"))))\n\n(defn mouse-down?\n  [js-evt]\n  (= 1 (aget js-evt \"buttons\")))\n\n(defn mouse-handler-maker\n  [rect-mouse-handler]\n  (fn [js-evt]\n    (let [id (keyword (aget js-evt \"target\" \"id\"))\n          type (keyword (.-type js-evt))]\n      (condp = id\n        :overlay (when (and\n                         (not (comp/is-resizing-rect?))\n                         (not (comp/is-moving-rect?))\n                         (= type :mousemove)\n                         (mouse-down? js-evt))\n                   (handle-event! :mouse-down js-evt))\n        :movable-rect (rect-mouse-handler js-evt)\n        :top (rect-mouse-handler js-evt)\n        :left (rect-mouse-handler js-evt)\n        :bottom (rect-mouse-handler js-evt)\n        :right (rect-mouse-handler js-evt)\n        :top-left (rect-mouse-handler js-evt)\n        :top-right (rect-mouse-handler js-evt)\n        :bottom-left (rect-mouse-handler js-evt)\n        :bottom-right (rect-mouse-handler js-evt)\n\n        ;; else\n        nil\n\n        )\n      )))\n\n\n(defn init!\n  []\n  (let [{:keys [width height]} @state-atom\n        rect-thing (comp/rect-maker {:movable-area-width  width\n                                     :movable-area-height height\n                                     :on-move             on-rect-move\n                                     :on-resize           on-rect-resize})\n        mouse-handler (mouse-handler-maker (:mouse-handler rect-thing))]\n\n    (c/create-canvas width height)\n    (c/resize-canvas)\n\n    ;(dispatch-worker {:name :batch-random-cells :data {:n      1000\n    ;                                                   :height height\n    ;                                                   :width  width\n    ;                                                   :tree   initial-tree}} handle-event!)\n\n\n    (handle-event! :random-cells 100)\n\n    (comp/add-mouse-window-handlers! mouse-handler)\n    ;; TOOOOODO\n    ;(i/mouse-click (c/canvas) (fn [e] (handle-event! :mouse-click e)))\n    ;(i/mouse-down-move (c/canvas) (fn [e] (handle-event! :mouse-down e)))\n\n    (render @state-atom)\n\n    (rd/render\n      [:div {:style {:position \"relative\"}}\n       [(:component rect-thing)]\n       [comp/controls]\n       ]\n      (. js/document (getElementById \"app\")))\n    )\n  )\n\n(defn reload! [] (render @state-atom))\n\n(defn profile-insert-cells\n  [n]\n  (println \"Profile insert-cells , n = \" n)\n  (profile\n    {}\n    (doall\n      (dotimes [_ 15]\n        (p (qt/insert-cells initial-tree (qt/make-cells n))))))\n  )\n\n(comment\n\n  (doseq [n [10\n             100\n             500\n             1000\n             1500\n             5000\n             7500\n             10000]]\n    (println \"------\")\n    (profile-insert-cells n)\n    (println \"------\")\n    )\n\n  (time (qt/random-cells 10000 1024 1024))\n\n  (qt/insert-cells initial-tree (qt/make-cells 10))\n  (profile\n    {}\n    (doall\n      (dotimes [_ 15]\n        (p (qt/insert-cells initial-tree (qt/make-cells 1000000))))))\n\n  (println (qt/in-tree? (:tree @state-atom) {:x 901, :y 95}))\n  )\n"]}