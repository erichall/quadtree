{"version":3,"sources":["quad/resizable_rect.cljs"],"mappings":"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","names":["quad.resizable-rect/debounce","f","interval","id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","args","cljs.core/deref","js/clearTimeout","new-id","js/setTimeout","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","js/quad","js/quad.resizable-rect","js/quad.resizable-rect.state-atom","quad.resizable-rect/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","quad.resizable-rect/initial-state","quad.resizable-rect/client-x","e","quad.resizable-rect/client-y","quad.resizable-rect/page-y","quad.resizable-rect/page-x","quad.resizable-rect/get-offset-top","el","quad.resizable-rect/get-offset-left","quad.resizable-rect/scroll-left","quad.resizable-rect/scroll-top","quad.resizable-rect/client-left","quad.resizable-rect/client-top","quad.resizable-rect/get-bb","quad.resizable-rect/left-bb!","left","bb","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","quad.resizable-rect/top-bb!","top","quad.resizable-rect/get-element-by-id","js/document.getElementById","quad.resizable-rect/in-bounds?","bb-parent","bb-target","offset-x","offset-y","max-offset-x","max-offset-y","quad.resizable-rect/mouse-x","quad.resizable-rect/mouse-y","quad.resizable-rect/is-move?","movable-rect-id","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quad.resizable-rect/is-resize?","edges","cljs.core/boolean","cljs.core/some","edge","quad.resizable-rect/is-resizing?","quad.resizable-rect/is-moving?","quad.resizable-rect/clamp","v","max-value","min-value","x__4276__auto__","y__4277__auto__","x__4273__auto__","y__4274__auto__","var_args","G__62026","quad.resizable-rect/handle-event!","js/Error","name","data","quad.resizable_rect.handle_event_BANG_.cljs$core$IFn$_invoke$arity$3","callbacks","pred__62027","expr__62028","G__62030","G__62031","G__62032","G__62033","G__62034","G__62035","G__62036","G__62037","G__62038","G__62039","G__62044","G__62045","G__62050","G__62051","G__62054","G__62055","G__62060","G__62061","G__62085","G__62086","cljs.core/=","cljs.core/not","map__62040","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","x","y","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__62043","fexpr__62042","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","map__62046","down?","initial-x","initial-y","G__62049","fexpr__62048","G__62053","fexpr__62052","map__62056","height","width","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__62059","fexpr__62058","map__62062","current-resize","start-y","start-x","start-width","start-height","max-width","min-width","max-height","min-height","mouse-x","mouse-y","dy","dx","pred__62064","expr__62065","G__62067","G__62068","G__62069","G__62070","G__62071","G__62072","G__62073","G__62074","G__62075","G__62076","G__62077","G__62078","G__62079","G__62080","G__62081","G__62082","G__62084","fexpr__62083","G__62088","fexpr__62087","G__62090","quad.resizable-rect/resize-edge","p__62091","map__62092","quad.resizable_rect.resize_edge.cljs$core$IFn$_invoke$arity$2","w","h","cursor","border?","color?","extras","style","or__4185__auto__","p__62094","map__62095","quad.resizable-rect/resizable-rect","state","map__62097","edge-width","corner-width","p__62099","map__62100","quad.resizable-rect/rect-maker","movable-area-width","movable-area-height","on-move","on-resize","js-evt","type","pred__62102","expr__62103","G__62105","G__62106","G__62107","G__62108","G__62109","G__62110","quad.resizable_rect.handle_event_BANG_.cljs$core$IFn$_invoke$arity$2","map__62111","trigger-event","G__62113","G__62114","G__62115","G__62116","G__62117","G__62118","G__62119"],"sourcesContent":["(ns quad.resizable-rect\n  (:require [reagent.core :as r]))\n\n(defn debounce\n  [f interval]\n  (let [id (atom nil)]\n    (fn [& args]\n      (js/clearTimeout @id)\n      (let [new-id (js/setTimeout (fn []\n                                    (apply f args)) interval)]\n        (reset! id new-id))\n      )\n    )\n  )\n\n(defonce state-atom (r/atom nil))\n(def initial-state {:edge-width     10\n                    :corner-width   15\n\n                    :width          200\n                    :height         200\n                    :min-width      50\n                    :min-height     50\n                    :x              300\n                    :y              200\n                    :current-resize nil\n\n                    :moving?        false\n                    :resizing?      false\n\n                    :down?          false\n                    :initial-x      0\n                    :initial-y      0\n\n                    :resize-edges   [\"right\" \"left\" \"top\" \"bottom\" \"top-left\" \"top-right\" \"bottom-left\" \"bottom-right\"]\n\n                    ;; save these offsets so we can ignore calling getBoundingClientRect all the time\n                    :top-offset     nil\n                    :left-offset    nil})\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(defn client-x [e] (.-clientX e))\n(defn client-y [e] (.-clientY e))\n(defn page-y [e] (.-pageY e))\n(defn page-x [e] (.-pageX e))\n(defn get-offset-top [el] (.-offsetTop el))\n(defn get-offset-left [el] (.-offsetTop el))\n(defn scroll-left [el] (.-scrollLeft el))\n(defn scroll-top [el] (.-scrollTop el))\n(defn client-left [el] (.-clientLeft el))\n(defn client-top [el] (.-clientTop el))\n(defn get-bb [el] (.getBoundingClientRect el))\n\n(defn left-bb!\n  \"Left offset, check if we have it first, otherwise call the dom and then save it.\"\n  [el]\n  (let [left (:left-offset @state-atom)]\n    (if (some? left)\n      left\n      (let [bb (get-bb el)]\n        (-> (swap! state-atom assoc :left-offset (.-left bb))\n            :left-offset)))))\n\n(defn top-bb!\n  \"Top offset, check if we have it first, otherwise call the dom and then save it.\"\n  [el]\n  (let [top (:top-offset @state-atom)]\n    (if (some? top)\n      top\n      (let [bb (get-bb el)]\n        (-> (swap! state-atom assoc :top-offset (.-top bb))\n            :top-offset)))))\n\n(defn get-element-by-id [id] (js/document.getElementById id))\n\n(defn in-bounds?\n  [e]\n  (let [bb-parent (get-bb (aget e \"target\" \"parentElement\"))\n        bb-target (get-bb (aget e \"target\"))\n        offset-x (- (.-left bb-target) (.-left bb-parent))\n        offset-y (- (.-top bb-target) (.-top bb-parent))\n\n        max-offset-x (- (.-right bb-parent) (.-right bb-target))\n        max-offset-y (- (.-bottom bb-parent) (.-bottom bb-target))]\n    (and\n      (>= offset-x 0)\n      (>= offset-y 0)\n      (>= max-offset-x 0)\n      (>= max-offset-y 0))))\n\n(defn mouse-x\n  \"The relative x-coordinate. We take the bb from the overlay element otherwise coordinates is messed up.\"\n  [e]\n  (- (client-x e) (left-bb! (get-element-by-id \"overlay\"))))\n\n(defn mouse-y\n  \"The relative y-coordinate.\"\n  [e]\n  (- (client-y e) (top-bb! (get-element-by-id \"overlay\"))))\n\n(defn is-move?\n  [e movable-rect-id]\n  (= (aget e \"target\" \"id\") movable-rect-id))\n\n(defn is-resize?\n  [e edges]\n  (let [id (aget e \"target\" \"id\")]\n    (boolean (some (fn [edge] (= id edge)) edges))))\n\n(defn is-resizing?\n  []\n  (:resizing? @state-atom))\n\n(defn is-moving?\n  []\n  (:moving? @state-atom))\n\n(defn clamp\n  [v max-value min-value]\n  (min (max v min-value) max-value))\n\n(defn handle-event!\n  ([name data] (handle-event! name data nil))\n  ([name data callbacks]\n   (condp = name\n     ;; ---\n     ;; mouse-events are recursive, just to keep all the logic in here...\n     :on-mouse-leave nil                                    ;(swap! state-atom assoc :moving? false :resizing? false)\n     :on-mouse-down (cond\n                      (and (is-move? data \"movable-rect\") (not (:resizing? @state-atom)))\n                      (handle-event! :on-move-start data callbacks)\n\n                      (and (is-resize? data (:resize-edges @state-atom)) (not (:moving? @state-atom)))\n                      (handle-event! :on-resize-start data callbacks)\n                      :else nil)\n     :on-mouse-move (cond\n                      (:moving? @state-atom) (handle-event! :on-move data callbacks)\n                      (:resizing? @state-atom) (handle-event! :on-resize data callbacks))\n     :on-mouse-up (cond\n                    (:moving? @state-atom) (handle-event! :on-move-end data callbacks)\n                    (:resizing? @state-atom) (handle-event! :on-resize-end data callbacks))\n     ;;  ----\n\n     :on-move-start (let [{:keys [x y]} @state-atom]\n                      (swap! state-atom assoc\n                             :down? true\n                             :moving? true\n                             :initial-x (- (client-x data) x)\n                             :initial-y (- (client-y data) y))\n                      (when (:on-move-start callbacks)\n                        ((:on-move-start callbacks)\n                         (merge {:event data} (select-keys @state-atom [:x :y :height :width])))))\n     :on-move (let [{:keys [down? initial-x initial-y]} @state-atom]\n                (when down?\n                  (swap! state-atom assoc\n                         :x (- (client-x data) initial-x)\n                         :y (- (client-y data) initial-y))\n                  (when (:on-move callbacks)\n                    ((:on-move callbacks)\n                     (merge {:event data} (select-keys @state-atom [:x :y :height :width])))\n                    )\n                  )\n\n                )\n     :on-move-end (when (:down? @state-atom)\n                    (swap! state-atom assoc :down? false :moving? false)\n                    (when (:on-move-end callbacks)\n                      ((:on-move-end callbacks)\n                       (merge {:event data} (select-keys @state-atom [:x :y :height :width])))))\n     :on-resize-start (let [{:keys [height width]} @state-atom]\n                        (swap! state-atom assoc\n                               :resizing? true\n                               :current-resize (keyword (aget data \"target\" \"id\"))\n                               :start-x (mouse-x data)\n                               :start-y (mouse-y data)\n                               :start-width width\n                               :start-height height)\n                        (when (:on-resize-start callbacks)\n                          ((:on-resize-start callbacks)\n                           (merge {:event data} (select-keys @state-atom [:x :y :height :width]))))\n                        )\n     :on-resize (let [{:keys [current-resize start-y start-x start-width start-height max-width min-width max-height min-height]} @state-atom\n                      mouse-x (mouse-x data)\n                      mouse-y (mouse-y data)\n                      dy (- mouse-y start-y)\n                      dx (- mouse-x start-x)]\n                  (condp = current-resize\n                    :top (swap! state-atom assoc\n                                :height (- start-height dy)\n                                :y (+ start-y dy))\n                    :left (swap! state-atom assoc\n                                 :width (- start-width dx)\n                                 :x (+ start-x dx))\n                    :right (swap! state-atom assoc :width (+ start-width dx))\n                    :bottom (swap! state-atom assoc :height (+ start-height dy))\n                    :top-left (swap! state-atom assoc\n                                     :width (- start-width dx)\n                                     :height (- start-height dy)\n                                     :x (+ start-x dx)\n                                     :y (+ start-y dy))\n                    :top-right (swap! state-atom assoc\n                                      :height (- start-height dy)\n                                      :width (+ start-width dx)\n                                      :y (+ start-y dy))\n                    :bottom-left (swap! state-atom assoc\n                                        :width (- start-width dx)\n                                        :height (+ start-height dy)\n                                        :x (+ start-x dx))\n                    :bottom-right (swap! state-atom assoc\n                                         :height (+ start-height dy)\n                                         :width (+ start-width dx))\n                    (when (:on-resize callbacks)\n                      ((:on-resize callbacks)\n                       (merge {:event data} (select-keys @state-atom [:x :y :height :width]))))))\n     :on-resize-end (do\n                      (swap! state-atom assoc :resizing? false)\n                      (when (:on-resize-end callbacks)\n                        ((:on-resize-end callbacks)\n                         (merge {:event data} (select-keys @state-atom [:x :y :height :width]))))))))\n\n(defn resize-edge\n  ([args] (resize-edge args nil))\n  ([{:keys [w h x y cursor id border? color?]} extras]\n   (let [style {:width            (str w \"px\")\n                :height           (str h \"px\")\n                :transform        (str \"translate(\" x \"px, \" y \"px)\")\n                :background-color (when color? \"rgba(119,119,119, 0.3)\")\n                ;:opacity          0.3\n                ;:border           (when border? \"1px solid white\")\n                :cursor           cursor\n                :position         \"absolute\"}]\n     [:div {:style (merge style extras)\n            :id    (or id (str \"edge-\" x \"-\" y))}])))\n\n(defn resizable-rect\n  [{:keys [state]}]\n  (let [{:keys [x y edge-width corner-width height width]} state]\n    [:div {:style {:position \"absolute\"}}\n     [resize-edge {:id     :left\n                   :x      x\n                   :y      y\n                   :w      edge-width\n                   :h      height\n                   :color  true\n                   :cursor \"ew-resize\"}\n      {:border-left \"2px solid white\"}]\n     [resize-edge {:id     :right\n                   :w      edge-width\n                   :h      height\n                   :x      (- (+ width x) edge-width)\n                   :y      y\n                   :border true\n                   :color  true\n                   :cursor \"ew-resize\"}\n      {:border-right \"2px solid white\"}]\n     [resize-edge {:id     :top\n                   :w      width\n                   :h      edge-width\n                   :x      x\n                   :y      y\n                   :border true\n                   :color  true\n                   :cursor \"ns-resize\"}\n      {:border-top \"2px solid white\"}]\n     [resize-edge {:id     :bottom\n                   :w      width\n                   :h      edge-width\n                   :x      x\n                   :border true\n                   :color  true\n                   :y      (- (+ height y) edge-width 2)    ;; not sure, borders just dont go together here...?!\n                   :cursor \"ns-resize\"}\n      {:border-bottom \"2px solid white\"}\n      ]\n     [resize-edge {:id     :top-left\n                   :w      corner-width\n                   :h      corner-width\n                   :x      x\n                   :y      y\n                   :cursor \"nwse-resize\"}]\n     [resize-edge {:id     :top-right\n                   :w      corner-width\n                   :h      corner-width\n                   :x      (- (+ width x) corner-width)\n                   :y      y\n                   :cursor \"nesw-resize\"}]\n     [resize-edge {:id     :bottom-left\n                   :w      corner-width\n                   :h      corner-width\n                   :x      x\n                   :y      (- (+ height y) corner-width)\n                   :cursor \"nesw-resize\"}]\n     [resize-edge {:id     :bottom-right\n                   :w      corner-width\n                   :h      corner-width\n                   :x      (- (+ width x) corner-width)\n                   :y      (- (+ height y) corner-width)\n                   :cursor \"nwse-resize\"}\n      ]\n     ]))\n\n;; TODO\n;; Fix the little glitchy thingy when resizing from top, I think we need to clamp the cursor pos to the absolute edges.\n\n(defn rect-maker\n  [{:keys [movable-area-width movable-area-height on-move on-resize]}]\n\n  (swap! state-atom assoc\n         :max-height movable-area-height\n         :max-width movable-area-width)\n\n  {:mouse-handler (fn [js-evt]\n                    (let [type (keyword (.-type js-evt))]\n                      (condp = type\n                        :on-mouse-move (handle-event! :on-mouse-move js-evt {:on-move on-move})\n                        :on-mouse-up (handle-event! :on-mouse-up js-evt)\n                        :on-mouse-down (handle-event! :on-mouse-down js-evt)\n\n                        ;; else\n                        nil)))\n   :component     (fn []\n                    (let [{:keys [x y width height max-height max-width]} @state-atom\n                          trigger-event handle-event!]\n                      [:div {:style {:position \"relative\"}}\n                       [:div {:style         {:position \"absolute\"\n                                              :height   (str max-height \"px\")\n                                              :width    (str max-width \"px\")}\n                              :id            \"overlay\"\n                              :on-mouse-move (fn [e] (trigger-event :on-mouse-move e {:on-move on-move}))\n                              :on-mouse-up   (fn [e] (trigger-event :on-mouse-up e))\n                              :on-mouse-down (fn [e] (trigger-event :on-mouse-down e))}\n                        [:div {:style {:display          \"inline-block\"\n                                       :width            (str width \"px\")\n                                       :height           (str height \"px\")\n                                       :transform        (str \"translate(\" x \"px, \" y \"px)\")\n                                       :user-select      \"none\"\n                                       :background-color \"rgb(119, 119, 119)\"\n                                       :opacity          0.3\n                                       :cursor           \"move\"\n                                       :position         \"absolute\"}\n                               :id    \"movable-rect\"}]\n                        [resizable-rect {:state @state-atom}]]]))})\n\n"]}