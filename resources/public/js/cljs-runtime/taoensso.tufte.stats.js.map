{"version":3,"sources":["taoensso/tufte/stats.cljc"],"mappings":"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","names":["this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","taoensso.tufte.stats/SortedLongs","taoensso.tufte.stats/->SortedLongs","a","_","taoensso.tufte.stats/sorted-longs?","x","taoensso.tufte.stats/sort-longs","longs","cljs.core/array?","cljs.core/to-array","goog.array/sort","taoensso.tufte.stats/long-percentiles","max-idx","G__28820","Math/round","G__28821","G__28822","G__28823","G__28824","G__28825","taoensso.tufte.stats/MinMax","taoensso.tufte.stats/->MinMax","vmin","vmax","taoensso.tufte.stats/min-max","cljs.core/count","vec__28830","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v1","min-max","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","in","taoensso.tufte.stats/stats","sorted-longs","n","vec__28837","sum","a__4663__auto__","l__4664__auto__","i","mean","mad-sum","G__28844","Math/abs","mad","p25","p50","p75","p90","p95","p99","taoensso.tufte.stats/merge-stats","m0","m1","map__28846","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__28847","js/Error","n0","min0","max0","sum0","mad-sum0","p25-0","p50-0","p75-0","p90-0","p95-0","p99-0","n1","min1","max1","sum1","mad-sum1","p25-1","p50-1","p75-1","p90-1","p95-1","p99-1","n2","n0-ratio","n1-ratio","sum2","mean2","min2","max2","mad-sum2","p25-2","G__28851","p50-2","G__28852","p75-2","G__28853","p90-2","G__28854","p95-2","G__28855","p99-2","G__28856","mad2","taoensso.tufte.stats/perc","d","G__28858","round2","taoensso.encore/round2","taoensso.tufte.stats/fmt","nanosecs","ns","G__28860","G__28862","G__28864","G__28866","taoensso.tufte.stats/fmt-comma","cljs.core/reverse","cljs.core.partition.cljs$core$IFn$_invoke$arity$4","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/join","clojure.string.join.cljs$core$IFn$_invoke$arity$2","clojure.string/reverse","taoensso.tufte.stats/all-format-columns","taoensso.tufte.stats/default-format-columns","taoensso.tufte.stats/default-format-id-fn","id","p__28867","map__28868","cljs.core.get.cljs$core$IFn$_invoke$arity$3","taoensso.tufte.stats/get-max-id-width","stats","format-id-fn","cljs.core/reduce-kv","k","v","c","p__28870","map__28871","taoensso.tufte.stats/format-stats","clock-total","id-stats","columns","sort-fn","max-id-width","opts","m","taoensso.truss.impl/revery?","__in","e","fexpr__28874","cljs.core/contains?","taoensso.truss.impl/set*","taoensso.truss.impl/-dummy-error","e28873","taoensso.truss.impl/-invar-violation!","cljs.core/long","accounted-total","_id","s","sorted-ids","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__28875","taoensso.encore/rcompare","cljs.core/keys","or__4185__auto__","column->pattern","sb","taoensso.encore.str_builder.cljs$core$IFn$_invoke$arity$1","append-col","column","map__28876","min-width","align","taoensso.encore.sb_append.cljs$core$IFn$_invoke$arity$2","taoensso.encore.format.cljs$core$IFn$_invoke$arity$variadic","G__28879","cljs.core/Keyword","seq__28880","cljs.core/seq","chunk__28881","count__28882","i__28883","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","seq__28884","chunk__28885","count__28886","i__28887","seq__28906","chunk__28907","count__28908","i__28909","seq__28916","chunk__28917","count__28918","i__28919","G__28914","G__28915","G__28922","G__28923","seq__28924","chunk__28925","count__28926","i__28927","G__28932","G__28933","seq__28934","chunk__28935","count__28936","i__28937","G__28941","G__28943"],"sourcesContent":["(ns taoensso.tufte.stats\n  \"Basic stats utils. Private, subject to change.\"\n  (:require [taoensso.encore :as enc]\n            [clojure.string  :as str]\n   #?(:cljs [goog.array])))\n\n(comment\n  (do\n    (defn rand-vs [n & [max]] (take n (repeatedly (partial rand-int (or max Integer/MAX_VALUE)))))\n    (def v1 (rand-vs 1e5))\n    (def v1-sorted (sort-longs v1))))\n\n#?(:clj (def ^:const longs-class (Class/forName \"[J\")))\n#?(:clj (defn- longs? [x] (instance? longs-class x)))\n(comment (longs? (long-array 10)))\n\n(deftype SortedLongs [^longs a]\n  #?@(:clj  [clojure.lang.Counted  (count [_] (alength a))]\n      :cljs [            ICounted (-count [_] (alength a))]))\n\n(defn sorted-longs? [x] (instance? SortedLongs x))\n(defn sort-longs ^SortedLongs [longs]\n  (if (sorted-longs? longs)\n    longs\n    #?(:cljs\n       (let [a (if (array? longs) longs (to-array longs))]\n         (goog.array/sort a)\n         (SortedLongs. a))\n\n       :clj\n       (let [^longs a (if (longs? longs) longs (long-array longs))]\n         (java.util.Arrays/sort a) ; O(n.log(n)) on JDK 7+\n         (SortedLongs. a)))))\n\n(comment\n  (vec (.-a (sort-longs nil)))\n  (vec (.-a (sort-longs [])))\n  (vec (.-a (sort-longs (rand-vs 10)))))\n\n(defn long-percentiles\n  \"Returns ?[min p25 p50 p75 p90 p95 p99 max]\"\n  [longs]\n  (let [^longs a (.-a (sort-longs longs))\n        max-idx (dec (alength a))]\n    (if (< max-idx 0)\n      nil\n      [(aget a 0)\n       (aget a (Math/round (* 0.25 max-idx)))\n       (aget a (Math/round (* 0.50 max-idx)))\n       (aget a (Math/round (* 0.75 max-idx)))\n       (aget a (Math/round (* 0.90 max-idx)))\n       (aget a (Math/round (* 0.95 max-idx)))\n       (aget a (Math/round (* 0.99 max-idx)))\n       (aget a                     max-idx)])))\n\n(comment\n  (long-percentiles nil)\n  (long-percentiles [])\n  (enc/qb 100\n    (long-percentiles v1)\n    (long-percentiles v1-sorted)) ; [1580.76 0.02]\n  )\n\n(deftype MinMax [^long vmin ^long vmax])\n(defn min-max \"Returns ?[<min> <max>]\" [longs]\n  (if (sorted-longs? longs)\n    (let [^longs a (.-a ^SortedLongs longs)\n          max-idx (dec (alength a))]\n      (if (< max-idx 0)\n        nil\n        [(aget a 0) (aget a max-idx)]))\n\n    (if (zero? (count longs))\n      nil\n      (let [[v1] longs\n            ^MinMax min-max\n            (reduce\n              (fn [^MinMax acc ^long in]\n                (let [vmin (.-vmin acc)\n                      vmax (.-vmax acc)]\n                  (if (> in vmax)\n                    (MinMax. vmin in)\n                    (if (< in vmin)\n                      (MinMax. in vmin)\n                      acc))))\n              (MinMax. v1 v1)\n              longs)]\n        [(.-vmin min-max) (.-vmax min-max)]))))\n\n(comment (enc/qb 1e6 (min-max [10 9 -3 12]))) ; 267.25\n\n(comment\n  (let [a (long-array v1)]\n    (enc/qb 1e2\n      (reduce (fn [^long acc ^long in] (unchecked-add acc in)) v1)\n      (areduce a idx ret 0 (unchecked-add ret (aget a idx))))))\n\n(defn stats\n  \"Given a collection of longs, returns map with keys:\n  #{:n :min :max :sum :mean :mad-sum :mad :p25 :p50 :p75 :p90 :p95 :p99}, or nil\n  if collection is empty.\"\n  [longs]\n  (when longs\n    (let [sorted-longs (sort-longs longs)\n          ^longs a (.-a sorted-longs)\n          n (alength a)]\n      (if (zero? n)\n        nil\n        (let [sum     (areduce a i acc 0 (+ acc (aget a i)))\n              mean    (/ (double sum) (double n))\n              mad-sum (areduce a i acc 0.0 (+ acc (Math/abs (- (double (aget a i)) mean))))\n              mad     (/ (double mad-sum) (double n))\n\n              [vmin p25 p50 p75 p90 p95 p99 vmax] (long-percentiles sorted-longs)]\n\n          {:n n :min vmin :max vmax :sum sum :mean mean\n           :mad-sum mad-sum :mad mad\n           :p25 p25 :p50 p50 :p75 p75\n           :p90 p90 :p95 p95 :p99 p99})))))\n\n(comment (enc/qb 100 (stats v1) (stats v1-sorted))) ; [1604.23 38.3]\n\n(defn merge-stats\n  \"`(merge-stats (stats c0) (stats c1))` is a basic approximation of `(stats (into c0 c1)))`.\"\n  [m0 m1]\n  (if m0\n    (if m1\n      (let [_ (assert (get m0 :n))\n            _ (assert (get m1 :n))\n\n            {^long   n0       :n\n             ^long   min0     :min\n             ^long   max0     :max\n             ^long   sum0     :sum\n             ^double mad-sum0 :mad-sum\n             ^long   p25-0    :p25\n             ^long   p50-0    :p50\n             ^long   p75-0    :p75\n             ^long   p90-0    :p90\n             ^long   p95-0    :p95\n             ^long   p99-0    :p99} m0\n\n            {^long   n1       :n\n             ^long   min1     :min\n             ^long   max1     :max\n             ^long   sum1     :sum\n             ^double mad-sum1 :mad-sum\n             ^long   p25-1    :p25\n             ^long   p50-1    :p50\n             ^long   p75-1    :p75\n             ^long   p90-1    :p90\n             ^long   p95-1    :p95\n             ^long   p99-1    :p99} m1\n\n            _ (assert (pos? n0))\n            _ (assert (pos? n1))\n\n            n2       (+ n1 n0)\n            n0-ratio (/ (double n0) (double n2))\n            n1-ratio (/ (double n1) (double n2))\n\n            sum2  (+ sum0 sum1)\n            mean2 (/ (double sum2) (double n2))\n            min2  (if (< min0 min1) min0 min1)\n            max2  (if (> max0 max1) max0 max1)\n\n            ;; Batched \"online\" MAD calculation here is better= the standard\n            ;; Knuth/Welford method, Ref. http://goo.gl/QLSfOc,\n            ;;                            http://goo.gl/mx5eSK.\n            ;;\n            ;; Note that there's empirically no advantage in using `mean2` here\n            ;; asap, i.e. to reducing (- v1_i mean2).\n            mad-sum2 (+ mad-sum0 ^double mad-sum1)\n\n            ;;; These are pretty rough approximations. More sophisticated\n            ;;; approaches not worth the extra cost/effort in our case.\n            p25-2 (Math/round (+ (* n0-ratio (double p25-0)) (* n1-ratio (double p25-1))))\n            p50-2 (Math/round (+ (* n0-ratio (double p50-0)) (* n1-ratio (double p50-1))))\n            p75-2 (Math/round (+ (* n0-ratio (double p75-0)) (* n1-ratio (double p75-1))))\n            p90-2 (Math/round (+ (* n0-ratio (double p90-0)) (* n1-ratio (double p90-1))))\n            p95-2 (Math/round (+ (* n0-ratio (double p95-0)) (* n1-ratio (double p95-1))))\n            p99-2 (Math/round (+ (* n0-ratio (double p99-0)) (* n1-ratio (double p99-1))))\n\n            mad2 (/ (double mad-sum2) (double n2))]\n\n        {:n n2 :min min2 :max max2 :sum sum2 :mean mean2\n         :mad-sum mad-sum2 :mad mad2\n         :p25 p25-2 :p50 p50-2 :p75 p75-2\n         :p90 p90-2 :p95 p95-2 :p99 p99-2})\n      m0)\n    m1))\n\n(comment\n  (def v2 [1 2 2 3 2 1])\n  (def v3 [1 3 5 2 1 6])\n  (def v4 (into v2 v3))\n\n  (stats v2) {:min 1, :mean 1.8333333333333333, :mad-sum 3.333333333333333,  :p99 3, :n 6,  :p90 3, :max 3, :mad 0.5555555555555555, :p50 2, :sum 11, :p95 3}\n  (stats v3) {:min 1, :mean 3.0,                :mad-sum 10.0,               :p99 6, :n 6,  :p90 6, :max 6, :mad 1.6666666666666667, :p50 3, :sum 18, :p95 6}\n  (stats v4) {:min 1, :mean 2.4166666666666665, :mad-sum 14.666666666666666, :p99 6, :n 12, :p90 5, :max 6, :mad 1.222222222222222,  :p50 2, :sum 29, :p95 5}\n\n  (merge-stats (stats v2) (stats v3))\n  {:min 1, :mean 2.4166666666666665, :mad-sum 13.333333333333332, :p99 5, :n 12, :p90 5, :max 6, :mad 1.111111111111111, :p50 3, :sum 29, :p95 5}\n\n  (stats (stats v2) v3)\n  {:min 1, :mean 2.4166666666666665, :mad-sum 13.333333333333332, :p99 5, :n 12, :p90 5, :max 6, :mad 1.111111111111111, :p50 3, :sum 29, :p95 5}\n\n  (merge-stats (stats v2) (stats v2))\n  {:min 1, :mean 1.8333333333333333, :mad-sum 6.666666666666666, :p99 3, :n 12, :p90 3, :max 3, :mad 0.5555555555555555, :p50 2, :sum 22, :p95 3}\n\n  (let [v1 (rand-vs 1e5 80)\n        v2 (rand-vs 1e5 20)\n        v3 (into v1 v2)]\n    (mapv :mad\n      [(stats v1)\n       (stats v2)\n       (stats v3)\n       (merge-stats (stats v1) (stats v2))\n       (stats (stats v1) v2)]))\n\n  [19.943705799999858 5.015891904000014 18.906570458826117 12.479798851999936 12.479798851999936]\n  [20.033054674800002 5.013648978000108 18.914174079741983 12.523351826400054 12.523351826400054])\n\n;;;; Formatting\n\n(defn- perc [n d] (str (Math/round (* (/ (double n) (double d)) 100.0)) \"%\"))\n(comment [(perc 1 1) (perc 1 100) (perc 12 44)])\n\n(let [round2 #?(:cljs enc/round2 :clj (fn [n] (format \"%.2f\" n)))]\n  (defn- fmt [nanosecs]\n    (let [ns (double nanosecs)]\n      (cond\n        (>= ns 6e10) (str (round2 (/ ns 6e10)) \"m \")\n        (>= ns 1e9)  (str (round2 (/ ns 1e9))  \"s \")\n        (>= ns 1e6)  (str (round2 (/ ns 1e6))  \"ms\")\n        (>= ns 1e3)  (str (round2 (/ ns 1e3))  \"\u03bcs\")\n        :else        (str (round2    ns)       \"ns\")))))\n\n(comment\n  (format \"%.2f\" 40484.005)\n  (fmt 2387387870))\n\n(defn- fmt-comma [^long n]\n  (str\n    (when (neg? n) \"-\")\n    (->> (str (Math/abs n))\n         (reverse)\n         (partition 3 3 \"\")\n         (map str/join)\n         (str/join \",\")\n         (str/reverse))))\n\n(def     all-format-columns [:n-calls :min   :p25 :p50   :p75 :p90 :p95 :p99 :max :mean :mad :clock :total])\n(def default-format-columns [:n-calls :min #_:p25 :p50 #_:p75 :p90 :p95 :p99 :max :mean :mad :clock :total])\n\n(def default-format-id-fn (fn [id] (str id)))\n\n(defn get-max-id-width [stats {:keys [format-id-fn]\n                               :or   {format-id-fn default-format-id-fn}}]\n  (when stats\n     (reduce-kv\n       (fn [^long acc k v]\n           (let [c (count (format-id-fn k))]\n                (if (> c acc) c acc)))\n       9 ; (count \"Accounted\")\n       stats)))\n\n(defn format-stats\n  \"Returns a formatted table string for given `{<id> <stats>}` map.\n  Assumes nanosecond clock, stats based on profiling id'd nanosecond times.\"\n  [clock-total id-stats {:keys [columns sort-fn format-id-fn max-id-width] :as opts\n                         :or   {columns      default-format-columns\n                                sort-fn      (fn [m] (get m :sum))\n                                format-id-fn default-format-id-fn}}]\n  (when id-stats\n    (enc/have? [:el all-format-columns] :in columns)\n    (let [clock-total (long clock-total)\n          ^long accounted-total\n          (reduce-kv\n            (fn [^long acc _id s]\n              (+ acc (long (get s :sum))))\n            0 id-stats)\n\n          sorted-ids\n          (sort-by\n            (fn [id] (sort-fn (get id-stats id)))\n            enc/rcompare\n            (keys id-stats))\n\n          ^long max-id-width (or max-id-width (get-max-id-width id-stats opts))\n\n          column->pattern\n          {:id      {:heading \"pId\"    :min-width max-id-width :align :left}\n           :n-calls {:heading \"nCalls\"}\n           :min     {:heading \"Min\"}\n           :p25     {:heading \"25% \u2264\"}\n           :p50     {:heading \"50% \u2264\"}\n           :p75     {:heading \"75% \u2264\"}\n           :p90     {:heading \"90% \u2264\"}\n           :p95     {:heading \"95% \u2264\"}\n           :p99     {:heading \"99% \u2264\"}\n           :max     {:heading \"Max\"}\n           :mean    {:heading \"Mean\"}\n           :mad     {:heading \"MAD\"   :min-width 5}\n           :total   {:heading \"Total\" :min-width 6}\n           :clock   {:heading \"Clock\"}}\n\n          sb (enc/str-builder \"\")\n\n          append-col\n          (fn [column s]\n            (let [{:keys [min-width align]\n                   :or   {min-width 10 align :right}}\n                  (get column->pattern column)]\n\n              (enc/sb-append sb\n                (enc/format\n                  (str \"%\" (case align :left \"-\" :right \"\") min-width \"s\")\n                  s))))]\n\n      ; Write header rows\n      (doseq [column (into [:id] columns)]\n        (when-not (= :id column)\n          (enc/sb-append sb \" \"))\n        (append-col column (get-in column->pattern [column :heading])))\n\n      (enc/sb-append sb \"\\n\\n\")\n\n      ; Write id rows\n      (doseq [id sorted-ids]\n        (let [s (get id-stats id)\n              sum  (get s :sum)\n              mean (get s :mean)]\n\n          (append-col :id (format-id-fn id))\n          (doseq [column columns]\n            (enc/sb-append sb \" \")\n            (case column\n              :n-calls (append-col column (fmt-comma (get s :n)))\n              :mean    (append-col column (fmt mean))\n              :mad     (append-col column (str \"\u00b1\" (perc (get s :mad) mean)))\n              :total   (append-col column (perc sum clock-total))\n              :clock   (append-col column (fmt sum))\n              (do      (append-col column (fmt (get s column))))))\n\n          (enc/sb-append sb \"\\n\")))\n\n      ; Write accounted row\n      (enc/sb-append sb \"\\n\")\n      (append-col :id \"Accounted\")\n      (doseq [column columns]\n        (enc/sb-append sb \" \")\n        (case column\n          :total (append-col column (perc accounted-total clock-total))\n          :clock (append-col column (fmt accounted-total))\n          (do    (append-col column \"\"))))\n\n      ; Write clock row\n      (enc/sb-append sb \"\\n\")\n      (append-col :id \"Clock\")\n      (doseq [column columns]\n        (enc/sb-append sb \" \")\n        (case column\n          :total (append-col column \"100%\")\n          :clock (append-col column (fmt clock-total))\n          (do    (append-col column \"\"))))\n\n      (enc/sb-append sb \"\\n\")\n      (str sb))))\n\n(comment\n  (println\n    (format-stats (* 1e6 30)\n      {:foo (stats (rand-vs 1e4 20))\n       :bar (stats (rand-vs 1e2 50))\n       :baz (stats (rand-vs 1e5 30))}) \"\\n\"))\n"]}