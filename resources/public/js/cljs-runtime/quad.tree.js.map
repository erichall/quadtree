{"version":3,"sources":["quad/tree.cljc"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k43184","else__4442__auto__","G__43188","cljs.core/Keyword","x","y","data","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__43189","vec__43190","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__43183","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__43193","coll__4436__auto__","cljs.core/hash-unordered-coll","this43185","other43186","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__43194","cljs.core/keyword-identical?","expr__43195","G__43197","G__43198","G__43199","G__43200","G__43201","G__43202","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","quad.tree/Cell","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__43187","extmap__4478__auto__","G__43203","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","quad.tree/->Cell","quad.tree/map->Cell","k43205","G__43209","capacity","bounds","cells","nw","ne","sw","se","name","depth","p__43210","vec__43211","G__43204","fexpr__43214","this43206","other43207","pred__43215","expr__43216","G__43218","G__43219","G__43220","G__43221","G__43222","G__43223","G__43224","G__43225","G__43226","G__43227","G__43228","G__43229","G__43230","G__43231","G__43232","G__43233","G__43234","G__43235","quad.tree/Quadtree","G__43208","G__43236","quad.tree/->Quadtree","quad.tree/map->Quadtree","js/quad","js/quad.tree","js/quad.tree.bounds-cache","quad.tree/bounds-cache","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","quad.tree/num-map-vals?","m","cljs.core/vals","cljs.core/every?","cljs.core/number?","quad.tree/condj","v","val","G__43237","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__43238","map__43239","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","quad.tree/make-tree","p__43241","p__43242","map__43243","map__43244","quad.tree/in-bounds?","values__8921__auto__","result__8922__auto__","cljs.test/do-report","cljs.core/cons","t__8952__auto__","e43247","cljs.core/=","width","height","bb","cx","cy","p","quad.tree/intersects?","e43248","e43249","e43250","e43251","a","b","p__43252","map__43253","js/Error","quad.tree/split","w","h","quad.tree/two-pow","e43255","e43256","Math/pow","e43257","n","p__43258","map__43259","quad.tree/split-by-root-bounds","td","p__43261","map__43262","quad.tree/bounds-by-depth","e43264","quad.tree/memo-split","cljs.core/memoize","p__43265","map__43266","quad.tree/split?","e43268","e43269","quad.tree/insert-cells","tree","acc-tree","c","quad.tree/insert","quad.tree/make-cells","i","cljs.core.range.cljs$core$IFn$_invoke$arity$1","quad.tree/cache-bounds!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","bbs","p__43270","map__43271","quad.tree/room-order","t","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.map.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/second","p__43273","map__43274","e43278","e43279","e43280","e43281","cell","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","map__43276","new-depth","b-nw","b-ne","b-se","b-sw","p__43282","map__43283","quad.tree/print-tree","spaces","s","_","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","quad.tree/flatten-tree","G__43286","map__43287","map__43289","flat-tree","cljs.core/empty?","js/quad.tree.random-seed-atom","quad.tree/random-seed-atom","var_args","G__43292","quad.tree/random-int","max","quad.tree.random_int.cljs$core$IFn$_invoke$arity$2","min","xx","G__43293","Math/abs","G__43294","Math/sin","G__43295","Math/floor","quad.tree/rand-xy","cljs.core/rand-int","%","quad.tree/random-cells","rands","xy","quad.tree/in?","cljs.core/some","p__43296","map__43297","quad.tree/in-tree?","e43299","G__43301","quad.tree/tree->cells","p__43305","map__43306","e43302","quad.tree.tree__GT_cells.cljs$core$IFn$_invoke$arity$1","r","e43303","e43304","quad.tree.tree__GT_cells.cljs$core$IFn$_invoke$arity$2","acc-cells","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","G__43309","quad.tree/tree->bounds","p__43311","map__43312","e43310","quad.tree.tree__GT_bounds.cljs$core$IFn$_invoke$arity$1","quad.tree.tree__GT_bounds.cljs$core$IFn$_invoke$arity$2","bounds-acc","G__43315","quad.tree/query","p__43318","map__43319","target","e43316","quad.tree.query.cljs$core$IFn$_invoke$arity$2","test-tree","e43317","target-bounds","quad.tree.query.cljs$core$IFn$_invoke$arity$3","found","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","in-bounds","quad.tree/masks","quad.tree/shifts","quad.tree/shifter","p__43321","vec__43322","acc-v","mask","shift","p__43325","map__43326","quad.tree/xy->z-order","quad.tree/sort-cells-by-z-order"],"sourcesContent":["(ns quad.tree\n  (:require [clojure.test :refer [is deftest]]))\n\n(declare insert)\n\n(defrecord Cell [x y data])\n(defrecord Quadtree [capacity bounds cells nw ne sw se name depth])\n\n(defonce bounds-cache (atom nil))\n(when (nil? @bounds-cache)\n  (reset! bounds-cache {}))\n\n(defn num-map-vals?\n  [m]\n  (->> (vals m)\n       (every? number?)))\n\n(defn condj\n  [v val]\n  (cond-> v val (conj val)))\n\n(defn make-tree\n  [{:keys [capacity bounds cells nw ne sw se name depth]\n    :or   {cells []\n           depth 0\n           name  \"\"\n           nw    nil\n           ne    nil\n           sw    nil\n           se    nil}}]\n  (Quadtree. capacity bounds cells nw ne sw se name depth))\n\n(defn in-bounds?\n  \"Check if a given cell is within a boundary.\"\n  {:test (fn []\n           (is (= (in-bounds? {:x      495\n                               :y      190\n                               :height 200\n                               :width  200}\n                              {:x 665\n                               :y 294})\n                  true)))}\n  [{:keys [x y width height] :as bb} {cx :x cy :y :as p}]\n  (if (nil? bb)\n    false\n    (and (>= cx (- x width))\n         (<= cx (+ x width))\n         (>= cy (- y height))\n         (<= cy (+ y height)))))\n\n(defn intersects?\n  {:test (fn []\n           (is (= (intersects? {:x 495 :y 190 :height 200 :width 200}\n                               {:x 768 :y 256 :height 256 :width 256})\n                  true))\n           (is (= (intersects? {:x 495 :y 190 :height 200 :width 200}\n                               {:x 256 :y 768 :height 256 :width 256})\n                  false))\n           (is (= (intersects? {:x 298, :y 374, :height 200, :width 200}\n                               {:x 512, :y 512, :width 512, :height 512})\n                  true))\n           (is (= (intersects? {:x 295 :y 461 :height 200 :width 200}\n                               {:x 512 :y 512 :width 512 :height 512})\n                  true))\n           )}\n  [a b]\n  (not (or\n         (> (- (:x a) (:width a)) (+ (:x b) (:width b)))\n         (< (+ (:x a) (:width a)) (- (:x b) (:width b)))\n         (> (- (:y a) (:height a)) (+ (:y b) (:height b)))\n         (< (+ (:y a) (:height a)) (- (:y b) (:height b))))))\n\n(defn split\n  \"Split a boundary into four\"\n  [{:keys [x y width height] :as b}]\n  {:pre [(num-map-vals? b)]}\n  (let [w (/ width 2)\n        h (/ height 2)]\n    {:b-nw {:x (- x w) :y (- y h) :height h :width w}\n     :b-ne {:x (+ x w) :y (- y h) :height h :width w}\n     :b-se {:x (+ x w) :y (+ y h) :height h :width w}\n     :b-sw {:x (- x w) :y (+ y h) :height h :width w}}))\n\n(defn two-pow\n  \"computes 2 ^ n\"\n  {:test (fn []\n           (is (= (two-pow 2) 4))\n           (is (= (two-pow 3) (int (Math/pow 2 3))))\n           (is (= (two-pow 4) (int (Math/pow 2 4)))))}\n  [n]\n  (bit-shift-left 1 n))\n\n(defn split-by-root-bounds\n  [{:keys [x y width height]} depth]\n  (let [td (two-pow depth)\n        w (/ width td)\n        h (/ height td)]\n    {:b-nw {:x (- x w) :y (- y h) :height h :width w}\n     :b-ne {:x (+ x w) :y (- y h) :height h :width w}\n     :b-se {:x (+ x w) :y (+ y h) :height h :width w}\n     :b-sw {:x (- x w) :y (+ y h) :height h :width w}}))\n\n(defn bounds-by-depth\n  {:test (fn []\n           (is (= (bounds-by-depth {:x 200, :y 200, :width 200, :height 200} 0)\n                  {:x 200, :y 200, :width 200, :height 200}\n                  ))\n           )}\n  [{:keys [x y width height]} depth]\n  (let [td (two-pow depth)\n        w (/ width td)\n        h (/ height td)]\n    {:x (- x w) :y (- y h) :height h :width w}))\n\n(def memo-split (memoize split))\n\n(defn split?\n  {:test (fn []\n           (is (= (split? {:nw 1 :ne 1 :sw 1 :se 1}) false))\n           (is (= (split? nil) true)))}\n  [{:keys [nw]}]\n  (nil? nw))\n\n(defn insert-cells\n  [tree cells]\n  (reduce (fn [acc-tree c] (insert acc-tree c)) tree cells))\n\n(defn make-cells\n  [n]\n  (reduce (fn [cells i] (conj cells {:x i :y i})) [] (range (inc n))))\n\n(defn cache-bounds!\n  [bounds]\n  (swap! bounds-cache (fn [bb] (reduce (fn [bbs b] (assoc bbs b 1)) bb (vals bounds)))))\n\n(defn room-order\n  [{:keys [nw ne se sw] :as t}]\n  (->> (map vector [:nw :ne :se :sw] (map count [(or (:cells nw) []) (or (:cells ne) []) (or (:cells se) []) (or (:cells sw) [])]))\n       (sort-by second)))\n\n(defn insert\n  {:test (fn []\n           (let [tree (make-tree {:capacity 4\n                                  :bounds   {:x      200\n                                             :y      200\n                                             :width  200\n                                             :height 200}})]\n             (is (= (-> (insert tree {:x 0 :y 0}) :cells)\n                    [{:x 0 :y 0}]))\n             (is (= (-> (insert tree {:x 0 :y 0}) (insert {:x 1 :y 1})\n                        :cells)\n                    [{:x 0 :y 0} {:x 1 :y 1}]))\n             (is (= (-> (insert tree {:x 0 :y 0}) (insert {:x 1 :y 1}) (insert {:x 2 :y 2})\n                        :cells)\n                    [{:x 0 :y 0} {:x 1 :y 1} {:x 2 :y 2}]))\n             (is (= (-> (insert tree {:x 0 :y 0}) (insert {:x 1 :y 1}) (insert {:x 2 :y 2}) (insert {:x 3 :y 3})\n                        :cells)\n                    [{:x 0 :y 0} {:x 1 :y 1} {:x 2 :y 2} {:x 3 :y 3}]))))}\n  [{:keys [capacity bounds cells nw ne se sw depth] :as tree} cell]\n  (cond\n    (not (in-bounds? bounds cell))\n    tree\n\n    ;; only insert new cells in leaf nodes, that is; we can insert it if we should split it later on\n    (and (split? tree) (< (count cells) capacity))\n    (update tree :cells conj cell)\n\n    ;; split the tree by clearing the current node cells and inserting them deeper (or higher?!)\n    (split? tree)\n    (let [new-depth (inc depth)\n          {:keys [b-nw b-ne b-se b-sw]} (memo-split bounds)]\n      (-> tree\n          (assoc :cells nil)                                ;; clear current cells\n          (assoc :nw (make-tree {:capacity capacity :bounds b-nw :name :nw :depth new-depth}))\n          (assoc :ne (make-tree {:capacity capacity :bounds b-ne :name :ne :depth new-depth}))\n          (assoc :se (make-tree {:capacity capacity :bounds b-se :name :se :depth new-depth}))\n          (assoc :sw (make-tree {:capacity capacity :bounds b-sw :name :sw :depth new-depth}))\n          (insert-cells (conj cells cell))))\n\n    (in-bounds? (:bounds nw) cell)\n    (assoc tree :nw (insert nw cell))\n\n    (in-bounds? (:bounds ne) cell)\n    (assoc tree :ne (insert ne cell))\n\n    (in-bounds? (:bounds se) cell)\n    (assoc tree :se (insert se cell))\n\n    (in-bounds? (:bounds sw) cell)\n    (assoc tree :sw (insert sw cell))\n\n    :else\n    tree))\n\n\n(defn print-tree\n  [{:keys [cells bounds nw ne se sw depth name] :as tree}]\n  (let [spaces (reduce (fn [s _] (str s \" \")) \"\" (range (or depth 0)))]\n    (println (str spaces \" | \" depth \" \" name \" \" cells \"\\n\" spaces \" | \" bounds \"\\n\" spaces \"  ____\"))\n    (when (some? nw)\n      (print-tree nw))\n    (when (some? ne)\n      (print-tree ne))\n    (when (some? se)\n      (print-tree se))\n    (when (some? sw)\n      (print-tree sw))\n    )\n  )\n\n(comment\n  (let [tree (make-tree {:capacity 4\n                         :bounds   {:x      200\n                                    :y      200\n                                    :width  200\n                                    :height 200}})]\n    ;(with-out-str\n    (-> (insert-cells tree [\n                            ;{:x 0 :y 0}\n                            ;{:x 250 :y 0}\n                            ;{:x 0 :y 250}\n                            ;{:x 250 :y 250}\n                            ;{:x 1 :y 1}\n                            {:x 0 :y 0}\n                            {:x 1 :y 1}\n                            {:x 2 :y 2}\n                            {:x 3 :y 3}\n                            {:x 4 :y 4}\n\n                            ])\n        print-tree\n        )\n    ;)\n    )\n  )\n\n(defn flatten-tree\n  [tree]\n  (loop [{:keys [cells bounds nw ne se sw]} tree\n         flat-tree []]\n    (cond\n      (nil? tree) nil\n      (empty? cells) nil\n      :else (-> (condj flat-tree\n                       (when (seq cells)\n                         {:cells cells :bounds bounds}))\n                (condj (flatten-tree nw))\n                (condj (flatten-tree ne))\n                (condj (flatten-tree se))\n                (condj (flatten-tree sw))))))\n\n(defonce random-seed-atom (atom 1))\n(defn random-int\n  ([max] (random-int 0 max))\n  ([min max]\n   (let [xx (Math/abs (Math/sin @random-seed-atom))]\n     (reset! random-seed-atom (inc @random-seed-atom))\n     (Math/floor (+ min (* xx (- max min)))))))\n\n(defn rand-xy\n  [w h]\n  {:x (rand-int w) :y (rand-int h)})\n\n(defn random-cells\n  [n width height]\n  {:pre  [(number? n)]\n   :post [(= n (count %))]}\n  (loop [rands #{}\n         i 0]\n    (if (= (count rands) n)\n      rands\n      (let [xy (rand-xy width height)]\n        (if (nil? (get rands xy))\n          (recur (conj rands xy) (inc i))\n          (recur rands i))))))\n\n(defn in?\n  [v x]\n  (if (nil? v)\n    false\n    (some (fn [a] (= a x)) v)))\n\n(defn in-tree?\n  \"Check if cell is in tree\"\n  {:test (fn []\n           (let [tree (make-tree {:capacity 4\n                                  :bounds   {:x      200\n                                             :y      200\n                                             :width  200\n                                             :height 200}})]\n             (is (= (-> (insert tree {:x 0 :y 0})\n                        (in-tree? {:x 0 :y 0}))\n                    true))))}\n  [{:keys [cells nw ne se sw]} cell]\n  (cond\n    (in? cells cell)\n    true\n\n    (nil? nw)\n    false\n\n    :else\n    (or (in-tree? nw cell)\n        (in-tree? ne cell)\n        (in-tree? se cell)\n        (in-tree? sw cell))))\n\n(comment\n  (let [t (make-tree {:capacity 4\n                      :bounds   {:x      200\n                                 :y      200\n                                 :width  200\n                                 :height 200}})]\n    (insert-cells t (into [] (random-cells 100 200 200)))\n    (in-tree? (insert-cells t (into [] (random-cells 100 200 200))) {:x 0 :y 0})\n    )\n  )\n\n(defn tree->cells\n  {:test (fn []\n           (let [tree (make-tree {:capacity 4\n                                  :bounds   {:x      200\n                                             :y      200\n                                             :width  200\n                                             :height 200}})]\n             (is (= (-> (insert tree {:x 0 :y 0})\n                        tree->cells)\n                    [{:x 0 :y 0}]))\n             (let [r (->> [{:x 100, :y 41}\n                           {:x 153, :y 46}\n                           {:x 129, :y 56}\n                           {:x 122, :y 69}\n                           {:x 59, :y 72}\n                           {:x 178, :y 83}\n                           {:x 2, :y 95}\n                           {:x 172, :y 97}\n                           {:x 54, :y 192}\n                           {:x 147, :y 194}]\n                          (sort-by :x)\n                          (sort-by :y))]\n               (is (= (->> (insert-cells tree r)\n                           tree->cells\n                           (sort-by :x)\n                           (sort-by :y))\n                      r)))\n             (let [r (->> (into [] (random-cells 200 200 200))\n                          (sort-by :x)\n                          (sort-by :y))]\n               (is (= (->> (insert-cells tree r)\n                           tree->cells\n                           (sort-by :x)\n                           (sort-by :y))\n                      r)))))}\n  ([tree] (tree->cells tree []))\n  ([{:keys [cells nw ne se sw]} acc-cells]\n   (cond\n     (nil? nw)\n     (if (empty? cells)\n       acc-cells\n       (concat acc-cells cells))\n\n     (empty? cells)\n     (concat (tree->cells nw acc-cells)\n             (tree->cells ne acc-cells)\n             (tree->cells se acc-cells)\n             (tree->cells sw acc-cells))\n     :else\n     (concat\n       cells\n       (tree->cells nw acc-cells)\n       (tree->cells ne acc-cells)\n       (tree->cells se acc-cells)\n       (tree->cells sw acc-cells)))))\n\n(defn tree->bounds\n  \"Give you a list of all the bounds contained within a tree.\"\n  {:test (fn []\n           (let [tree (make-tree {:capacity 4\n                                  :bounds   {:x      200\n                                             :y      200\n                                             :width  200\n                                             :height 200}})]\n             (is (= (-> (insert tree {:x 0 :y 0})\n                        tree->bounds)\n                    [{:height 200 :width 200 :x 200 :y 200}]))))}\n  ([tree] (tree->bounds tree []))\n  ([{:keys [bounds nw ne se sw]} bounds-acc]\n   (if (nil? nw)\n     (conj bounds-acc bounds)\n     (concat\n       [bounds]\n       (tree->bounds nw bounds-acc)\n       (tree->bounds ne bounds-acc)\n       (tree->bounds se bounds-acc)\n       (tree->bounds sw bounds-acc)))))\n\n(defn query\n  {:test (fn []\n           (let [tree (make-tree {:capacity 4\n                                  :bounds   {:x      200\n                                             :y      200\n                                             :width  200\n                                             :height 200}})\n                 target {:x      0\n                         :y      0\n                         :width  10\n                         :height 10}]\n             (is (= (-> (insert tree {:x 1 :y 1})\n                        (insert {:x 2 :y 2})\n                        (insert {:x 11 :y 11})\n                        (insert {:x 12 :y 11})\n                        (insert {:x 13 :y 11})\n                        (insert {:x 14 :y 11})\n                        (insert {:x 4 :y 4})\n                        (query target))\n                    [{:x 1 :y 1} {:x 2 :y 2} {:x 4 :y 4}]))\n             (let [test-tree {:capacity 4,\n                              :bounds   {:x 512, :y 512, :width 512, :height 512},\n                              :cells    [],\n                              :nw       {:capacity 4,\n                                         :bounds   {:x 256, :y 256, :height 256, :width 256},\n                                         :cells    [],\n                                         :nw       nil,\n                                         :ne       nil,\n                                         :sw       nil,\n                                         :se       nil,\n                                         :name     \"nw\"},\n                              :ne       {:capacity 4,\n                                         :bounds   {:x 768, :y 256, :height 256, :width 256},\n                                         :cells    [{:x 981, :y 286} {:x 665, :y 294}],\n                                         :nw       nil,\n                                         :ne       nil,\n                                         :sw       nil,\n                                         :se       nil,\n                                         :name     \"ne\"},\n                              :sw       {:capacity 4,\n                                         :bounds   {:x 256, :y 768, :height 256, :width 256},\n                                         :cells\n                                                   [{:x 422, :y 557}\n                                                    {:x 430, :y 1014}\n                                                    {:x 153, :y 934}\n                                                    {:x 144, :y 774}],\n                                         :nw       nil,\n                                         :ne       nil,\n                                         :sw       nil,\n                                         :se       nil,\n                                         :name     \"sw\"},\n                              :se       {:capacity 4,\n                                         :bounds   {:x 768, :y 768, :height 256, :width 256},\n                                         :cells\n                                                   [{:x 672, :y 1013}\n                                                    {:x 1023, :y 549}\n                                                    {:x 861, :y 931}\n                                                    {:x 984, :y 769}],\n                                         :nw       nil,\n                                         :ne       nil,\n                                         :sw       nil,\n                                         :se       nil,\n                                         :name     \"se\"},\n                              :name     \"start\"}]\n               (is (= (query test-tree {:x 295, :y 461, :height 200, :width 200})\n                      [{:x 422, :y 557}])))))}\n  ([tree target-bounds] (query tree target-bounds []))\n  ([{:keys [nw ne se sw bounds cells]} target-bounds found]\n   (cond\n     (not (intersects? target-bounds bounds))\n     found\n\n     (nil? nw)\n     (concat found (filter (fn [c] (in-bounds? target-bounds c)) cells))\n\n     :else\n     (let [in-bounds (filter (fn [c] (in-bounds? target-bounds c)) cells)]\n       (concat\n         in-bounds\n         (query nw target-bounds [])\n         (query ne target-bounds [])\n         (query se target-bounds [])\n         (query sw target-bounds []))))))\n\n(def masks [0x00FF00FF 0x0F0F0F0F 0x33333333 0x55555555])\n(def shifts [8 4 2 1])\n(defn shifter\n  [v]\n  (reduce (fn [acc-v [mask shift]]\n            (bit-and (bit-or acc-v (bit-shift-left acc-v shift)) mask)) v (map vector masks shifts)))\n(defn xy->z-order\n  [{:keys [x y]}]\n  (bit-or (shifter x) (bit-shift-left (shifter y) 1)))\n\n(defn sort-cells-by-z-order\n  [cells]\n  (->>\n    (map (fn [cell] (assoc cell :z-ord (xy->z-order cell))) cells)\n    (sort-by :z-ord)))\n\n(comment\n\n  (cljs.pprint/pprint @bounds-cache)\n\n  (sort-by :x [{:x 1 :y 1} {:x 0 :y 0}])\n\n  (concat [1] [1 2 3] [4])\n\n  (with-out-str (time (random-cells 1000000 1024 1024)))\n  )\n\n"]}