{"version":3,"sources":["quad/quad_worker.cljs"],"mappings":"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","names":["quad.quad-worker/post-msg","msg","js/postMessage","quad.quad-worker/init","msg-chan","quad.util.listen.cljs$core$IFn$_invoke$arity$2","js/self","c__25764__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25765__auto__","switch__25637__auto__","state_65798","state_val_65799","inst_65649","statearr-65803","statearr-65804","inst_65656","inst_65674","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","statearr-65805","inst_65690","inst_65734","statearr-65806","statearr-65807","statearr-65809","inst_65706","statearr-65812","statearr-65813","statearr-65814","inst_65631","inst_65629","inst_65630","inst_65633","inst_65634","cljs.core/not","statearr-65815","statearr-65816","statearr-65817","statearr-65820","statearr-65822","statearr-65824","inst_65711","inst_65710","inst_65716","inst_65717","inst_65718","inst_65719","inst_65720","inst_65721","inst_65722","cljs.core/PersistentHashMap","inst_65723","inst_65724","inst_65725","inst_65726","inst_65727","statearr-65829","statearr-65830","inst_65737","inst_65738","inst_65745","inst_65746","inst_65748","inst_65749","inst_65750","cljs.core/PersistentVector","inst_65751","inst_65752","inst_65753","inst_65754","inst_65755","inst_65756","inst_65757","inst_65758","inst_65759","inst_65760","statearr-65835","statearr-65838","inst_65730","statearr-65841","inst_65654","inst_65655","cljs.core.get.cljs$core$IFn$_invoke$arity$2","inst_65658","inst_65659","statearr-65842","statearr-65843","statearr-65844","inst_65677","inst_65678","inst_65679","inst_65680","inst_65681","inst_65683","inst_65684","inst_65691","statearr-65845","statearr-65846","statearr-65848","inst_65786","statearr-65851","inst_65763","statearr-65852","inst_65780","inst_65781","js/Error","inst_65782","statearr-65856","inst_65713","statearr-65857","statearr-65858","inst_65784","statearr-65862","statearr-65863","inst_65788","statearr-65864","inst_65790","statearr-65865","statearr-65866","inst_65736","statearr-65867","statearr-65869","statearr-65878","inst_65794","cljs.core.async.impl.ioc-helpers/return-chan","statearr-65880","cljs.core.async.impl.ioc-helpers/take!","inst_65693","inst_65694","inst_65695","inst_65696","inst_65697","inst_65698","inst_65699","inst_65700","inst_65701","inst_65702","inst_65703","inst_65704","statearr-65884","inst_65767","statearr-65886","statearr-65887","inst_65669","statearr-65890","inst_65651","statearr-65891","statearr-65893","inst_65638","inst_65639","inst_65640","inst_65641","cljs.core/PROTOCOL_SENTINEL","inst_65642","statearr-65894","statearr-65895","inst_65661","inst_65662","inst_65663","inst_65664","inst_65665","statearr-65896","statearr-65897","inst_65708","inst_65709","statearr-65898","statearr-65899","inst_65672","statearr-65900","statearr-65901","inst_65765","statearr-65902","inst_65732","statearr-65903","inst_65646","statearr-65905","statearr-65906","inst_65769","inst_65770","inst_65771","inst_65772","inst_65773","inst_65774","inst_65775","inst_65776","inst_65777","inst_65778","statearr-65907","inst_65740","statearr-65908","statearr-65909","statearr-65910","statearr-65911","state-machine__25638__auto__","ret-value__25639__auto__","result__25640__auto__","cljs.core/keyword-identical?","e65912","js/Object","ex__25641__auto__","statearr-65913","cljs.core.async.impl.ioc-helpers/process-exception","state__25766__auto__","statearr-65914","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quad.tree.query.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","quad.tree/random-cells","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","quad.tree/insert-cells","cljs.core/first","cljs.core/rest","quad.tree/insert"],"sourcesContent":["(ns quad.quad-worker\n  (:require [cljs.core.async :as async]\n            [quad.util :refer [setup-listener! listen]]\n            [quad.tree :as qt]))\n\n(defn post-msg\n  [msg]\n  (js/postMessage msg))\n\n(defn init\n  []\n  (let [msg-chan (listen js/self \"message\")]\n    (async/go-loop []\n                   (let [js-event (async/<! msg-chan)\n                         ;name (keyword (aget js-event \"data\" \"name\"))\n                         {:keys [name data]} (js->clj (aget js-event \"data\") :keywordize-keys true)\n                         {:keys [n height width tree]} data]\n                     (println \"Worker got name :: \" (keyword name))\n                     ;(println \"Worker got data :: \" n height width tree)\n                     (condp = (keyword name)\n                       :query-rect (let [in-rect (qt/query (:tree data) (:bounds data))]\n                                     ;(println \"IN __ \" in-rect)\n                                     (post-msg (clj->js {:name (:cb-name data)\n                                                         :data {:cells-in-rect in-rect}}))\n                                     )\n                       :batch-random-cells (let [cell-batches (->> (qt/random-cells n width height)\n                                                                   (partition 50))]\n                                             (loop [tree tree\n                                                    cell-batches cell-batches]\n                                               (if (empty? cell-batches)\n                                                 nil\n                                                 (let [new-tree (qt/insert-cells tree (first cell-batches))]\n                                                   (post-msg (clj->js {:name :new-tree\n                                                                       :data {:tree  new-tree\n                                                                              :cells (first cell-batches)}}))\n                                                   (recur new-tree (rest cell-batches))))))\n                       :incremental-random-cells (let [cells (qt/random-cells n width height)]\n                                                   (loop [tree tree\n                                                          cells cells]\n                                                     (if (empty? cells)\n                                                       nil\n                                                       (let [new-tree (qt/insert tree (first cells))]\n                                                         (post-msg (clj->js {:name :new-tree\n                                                                             :data {:tree  new-tree\n                                                                                    :cells [(first cells)]}}))\n                                                         (recur new-tree (rest cells))))))\n                       :random-cells (let [cells (qt/random-cells n width height)]\n                                       (post-msg (clj->js {:name :new-tree\n                                                           :data {:tree  (qt/insert-cells tree cells)\n                                                                  :cells cells}}))))\n                     (recur)\n                     ))\n    )\n  )\n"]}