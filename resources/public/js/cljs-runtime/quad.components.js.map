{"version":3,"sources":["quad/components.cljs"],"mappings":"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","names":["var_args","G__65621","quad.components/show-rects","js/Error","p__65622","map__65623","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","bounds","cells","nw","ne","se","sw","name","id","map__65635","x","y","width","height","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","p__65682","map__65688","quad.components.show_rects.cljs$core$IFn$_invoke$arity$2","tree","quad.components/render-bounds","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p__65743","map__65744","i","p__65793","map__65796","quad.components/render-cells","p__65800","map__65801","p__65808","map__65810","quad.components/show","state","p__65818","map__65819","quad.components/action-bar","trigger-event","G__65823","G__65825","G__65826","G__65827","G__65828","G__65831","G__65832","G__65833","G__65834","G__65836","G__65837","G__65839","G__65840","quad.components/rect-maker","props","quad.resizable-rect/rect-maker","quad.components/is-resizing-rect?","quad.resizable-rect/is-resizing?","quad.components/is-moving-rect?","quad.resizable-rect/is-moving?","p__65847","map__65849","quad.components/app","p__65853","map__65854","p__65859","map__65860","quad.components/add-mouse-window-handlers!","handler","chans","cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1","quad.util.listen.cljs$core$IFn$_invoke$arity$2","js/window","c__25764__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25765__auto__","switch__25637__auto__","state_65877","state_val_65879","statearr-65881","cljs.core.async.impl.ioc-helpers/take!","inst_65875","cljs.core.async.impl.ioc-helpers/return-chan","inst_65871","inst_65872","statearr-65882","statearr-65883","statearr-65885","state-machine__25638__auto__","ret-value__25639__auto__","result__25640__auto__","cljs.core/keyword-identical?","e65888","js/Object","ex__25641__auto__","statearr-65889","cljs.core.async.impl.ioc-helpers/process-exception","state__25766__auto__","statearr-65892","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","quad.components/mouse-handler","e","target","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","quad.components/controls"],"sourcesContent":["(ns quad.components\n  (:require [reagent.core :as r]\n            [quad.util :refer [listen]]\n            [cljs.core.async :as async]\n            [quad.resizable-rect :as rr]))\n\n(defn show-rects\n  ([{:keys [bounds cells nw ne se sw name]} id]\n   (if (nil? bounds)\n     nil\n     (let [{:keys [x y width height]} bounds]\n       (concat\n         [[:g {:key (str x \",\" y \",\" width \",\" height \",\" id)}\n           ;[:text {:x (- x 3)\n           ;        :y (- y 3)\n           ;        :style {:font \"italic 5px sans-serif\"}} (str x \",\" y \",\\n\" width \",\" height)]\n           ;[:text {:x (- x 3)\n           ;        :y (+ y 3)\n           ;        :style {:font \"italic 5px sans-serif\"}} name]\n           [:rect {:x      (- x width)\n                   :y      (- y height)\n                   :width  (* 2 width)\n                   :height (* 2 height)\n                   :style  {:opacity 0.8}\n                   :stroke \"gray\"\n                   :fill   \"none\"}]]]\n         (mapv (fn [{:keys [x y]}]\n                 [:g {:key (str x \"-\" y \"-\" width \"-\" height \"-\" id)}\n                  ;[:text {:x (- x 3)\n                  ;        :y (- y 3)\n                  ;        :style {:font \"italic 5px sans-serif\"}} (str x \",\" y)]\n                  [:circle {:cx    x\n                            :cy    y\n                            :r     3\n                            :fill  \"white\"\n                            :style {:opacity 0.4}}]]) cells)\n         (show-rects nw 1)\n         (show-rects ne 2)\n         (show-rects se 3)\n         (show-rects sw 4)))))\n  ([tree] (show-rects tree 0)))\n\n(defn render-bounds\n  [bounds]\n  (map-indexed (fn [i {:keys [x y width height]}]\n                 [:g {:key (str x \",\" y \",\" width \",\" height \",\" i)}\n                  [:rect {:x      (- x width)\n                          :y      (- y height)\n                          :width  (* 2 width)\n                          :height (* 2 height)\n                          :style  {:opacity 0.8}\n                          :stroke \"gray\"\n                          :fill   \"none\"}]]) bounds))\n\n(defn render-cells\n  [{:keys [cells width height]}]\n  (map-indexed (fn [i {:keys [x y]}]\n                 [:g {:key (str x \"-\" y \"-\" width \"-\" height \"-\" i)}\n                  ;[:text {:x (- x 3)\n                  ;        :y (- y 3)\n                  ;        :style {:font \"italic 5px sans-serif\"}} (str x \",\" y)]\n                  [:circle {:cx    x\n                            :cy    y\n                            :r     3\n                            :fill  \"white\"\n                            :style {:opacity 0.4}}]]) cells))\n\n(defn show\n  [{:keys [height width] :as state} bounds]\n  [:div {:style {:position \"absolute\"}}\n   [:div {:style {:position \"relative\"\n                  :height   height\n                  :width    width}}\n    [:svg {:height   height\n           :width    width\n           :id       \"svg-world\"\n           :viewport (str \"0 0 \" height \" \" width)\n           :style    {:border   \"1px dashed green\"\n                      :position \"absolute\"}}\n     (render-bounds bounds)\n     (render-cells state)]\n    [:div {:style {:height   height\n                   :width    width\n                   :position \"absolute\"}\n           :id    \"svg-world-clicker\"}]]])\n\n(defn action-bar\n  [{:keys [trigger-event]}]\n  [:div {:style {:margin-top     20\n                 :display        \"flex\"\n                 :flex-direction \"row\"}}\n   [:button {:on-click (fn []\n                         (trigger-event :print-tree)\n                         )} \"Tree\"]\n   [:button {:on-click (fn [] (trigger-event :random-cells 10)) :style {:margin-left \"5px\"}} \"10\"]\n   [:button {:on-click (fn [] (trigger-event :random-cells 100)) :style {:margin-left \"5px\"}} \"100\"]\n   [:button {:on-click (fn [] (trigger-event :random-cells 1000)) :style {:margin-left \"5px\"}} \"1000\"]\n   [:button {:on-click (fn [] (trigger-event :random-cells 10000)) :style {:margin-left \"5px\"}} \"10000\"]\n   [:button {:on-click (fn [] (trigger-event :random-cells 100000)) :style {:margin-left \"5px\"}} \"100000\"]\n   [:button {:on-click (fn [] (trigger-event :random-cells 1000000)) :style {:margin-left \"5px\"}} \"1000000\"]])\n\n(defn rect-maker [props] (rr/rect-maker props))\n(defn is-resizing-rect? [] (rr/is-resizing?))\n(defn is-moving-rect? [] (rr/is-moving?))\n\n(defn app\n  [{:keys [tree height width] :as state} bounds trigger-event]\n  [:div {:style {:display \"flex\" :flex-direction \"column\"}}\n   [:div {:style {:position \"relative\"\n                  :height   height\n                  :width    width}}\n    [show state bounds]\n    [rr/rect-maker {:movable-area-width  width\n                    :movable-area-height height\n                    :on-move             (fn [{:keys [x y width height]}])\n                    :on-resize           (fn [{:keys [x y width height]}])}]]\n   [action-bar {:state state :trigger-event trigger-event}]])\n\n(defn add-mouse-window-handlers!\n  [handler]\n  (let [chans (async/merge [(listen js/window \"mousedown\")\n                            (listen js/window \"mouseup\")\n                            (listen js/window \"mousemove\")])]\n    (async/go-loop\n      []\n      (handler (async/<! chans))\n      (recur))))\n\n(defn mouse-handler\n  [e]\n  (let [target (aget e \"target\" \"id\")]\n    (println target)\n    )\n  )\n\n(defn controls\n  []\n  [:div {:style         {:position   \"absolute\"\n                         :width      \"500px\"\n                         :height     \"100px\"\n                         :background \"green\"}\n         :on-click      (fn [e] (println \"Dude!\"))\n         :on-mouse-up   (fn [e])\n         :on-mouse-move (fn [e])}\n   ]\n  )\n"]}