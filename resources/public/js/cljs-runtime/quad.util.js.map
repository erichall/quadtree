{"version":3,"sources":["quad/util.cljs"],"mappings":";;;AAGA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE,AAAIC,AAAWC,AAASC;AAD5B,AAEG,AAAmBH,AAAIC,AAAWC,AAASC;;;AAF9C,AAAA,AAAA,AAAML,AAGFE,AAAIC,AAAWC;AAHnB,AAIG,AAAmBF,AAAIC,AAAWC;;;AAJrC,AAAA,AAAA,AAAMJ,AAKFG,AAAWC;AALf,AAMG,AAAmBE,AAAUH,AAAWC;;;AAN3C,AAAA,AAAA,AAAMJ;;AAAN,AAQA,AAAA,AAAA,AAAAF,AAAMU;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMO,AACFC,AAAQC,AAAKC;AADjB,AAEG,AAAMC,AAAI,AAACC;AAAX,AACE,AAACC,AAAgBL,AAAQC,AAAK,AAAKK;AAAL,AACE,AAAMJ;AAAN,AACE,AAAiBI;;AADnB;;AAEA,AAACC,AAAWJ,AAAIG;;;AAChDH;;;AAPL,AAAA,AAAA,AAAMJ,AAQFC,AAAQC;AARZ,AASG,AAAA,AAACO,AAAOR,AAAQC;;;AATnB,AAAA,AAAA,AAAMF;;AAAN,AAWA,AAAA,AAAMU,AACHC,AAAIC;AADP,AAEE,AAAG,AAAG,AAACC,AAAa,AAAGD,AAAID,AAAMA","names":["var_args","G__65615","quad.util/setup-listener!","js/Error","obj","event-type","callback","args","js/window","G__65617","quad.util/listen","element","type","prevent-default?","out","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","quad.util.setup_listener_BANG_.cljs$core$IFn$_invoke$arity$3","evt","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","quad.util.listen.cljs$core$IFn$_invoke$arity$3","quad.util/random","min","max","Math/random"],"sourcesContent":["(ns quad.util\n  (:require [cljs.core.async :as async]))\n\n(defn setup-listener!\n  ([obj event-type callback args]\n   (.addEventListener obj event-type callback args))\n  ([obj event-type callback]\n   (.addEventListener obj event-type callback))\n  ([event-type callback]\n   (.addEventListener js/window event-type callback)))\n\n(defn listen\n  ([element type prevent-default?]\n   (let [out (async/chan)]\n     (setup-listener! element type (fn [evt]\n                                     (when prevent-default?\n                                       (.preventDefault evt))\n                                     (async/put! out evt)))\n     out))\n  ([element type]\n   (listen element type false)))\n\n(defn random\n  [min max]\n  (+ (* (Math/random) (- max min)) min))"]}